<?xml version="1.0" encoding="UTF-8"?>
<project name="Freenet dependencies" default="all" basedir=".">

	<!-- =================================================================== -->
	<!-- Global properties                                                   -->
	<!-- =================================================================== -->

	<property file="build.properties" />
	<property file="source.properties" />
	<property name="javac.args" value="-Xlint"/>
	<property name="javac.target.version" value="1.5"/>
	<property name="java.class.dirs" value="/usr/share/java"/>

	<property name="pkg.base" value=".."/>
	<property name="build" value="build"/>
	<property name="src" value="src"/>
	<property name="dist" value="dist"/>
	<property name="tmp" value="tmp"/>
	<property name="lib" value="lib"/>

	<property name="version.src" value="freenet/node/ExtVersion.java" />
	<property name="version.make" value="freenet/node/ExtVersion.class" />

	<!-- TODO allow specific libraries to be skipped -->

	<!-- set version string based on git-describe -->
	<exec executable="git" failifexecutionfails="false"
		errorProperty="git.errror" outputproperty="git.describe" resultproperty="git.result">
		<arg value="describe" />
		<arg value="--always" />
		<arg value="--abbrev=4" />
	</exec>
	<condition property="git.revision" value="${git.describe}" else="@custom@">
		<and>
			<equals arg1="${git.result}" arg2="0" />
			<isset property="git.describe" />
		</and>
	</condition>

	<!-- =================================================================== -->
	<!-- Miscellaneous                                                       -->
	<!-- =================================================================== -->

	<target name="dist" depends="clean-all, all" description="clean-build everything"/>

	<target name="all" depends="package" description="build everything, incl. docs"/>

	<target name="clean-all" depends="clean, clean-local, clean-lib" description="clean all build products (except remote source code)"/>

	<target name="debug">
		<echoproperties/>
	</target>

	<!-- =================================================================== -->
	<!-- Standard build                                                      -->
	<!-- =================================================================== -->

	<target name="init">
		<mkdir dir="${build}"/>
		<mkdir dir="${dist}"/>
	</target>

	<target name="build" depends="init">
		<!-- Create the time stamp -->
		<tstamp/>

		<!-- Create the Version file with patched revision number in ${build} -->
		<copy file="${src}/${version.src}" tofile="${build}/${version.src}" overwrite="true" />
		<delete file="${build}/${version.make}" quiet="true" />
		<replace file="${build}/${version.src}">
			<replacefilter token="@custom@" value="${git.revision}"/>
		</replace>
		<echo message="Updated build version to ${git.revision} in ${main.make}/${version.src}"/>

		<javac srcdir="${build}" destdir="${build}" debug="on" optimize="on" source="1.5" target="1.5">
			<compilerarg line="${javac.args}"/>
			<include name="${version.src}"/>
		</javac>
	</target>

	<target name="package" depends="build,prepare-local,package-lib" description="build standard binary packages">
		<jar jarfile="${dist}/freenet-ext.jar" basedir="${build}" includes="**" update="yes" duplicate="fail" level="9">
			<exclude name="${version.src}"/>
		</jar>
		<copylib name="wrapper"/>
		<copylib name="bdb-je"/>
		<copylib name="db4o"/>
		<copylib name="commons-compress"/>
		<copylib name="lzmajio"/>
		<copylib name="mantissa"/>
	</target>

	<target name="clean" description="clean standard build products">
		<delete dir="${build}"/>
		<delete dir="${dist}"/>
	</target>

	<!-- =================================================================== -->
	<!-- Build local packages                                                -->
	<!-- =================================================================== -->

	<target name="prepare-local" depends="init,package-local">
		<unjar dest="${build}" src="${pkg.base}/onion-common/lib/onion-common.jar"/>
		<unjar dest="${build}" src="${pkg.base}/onion-fec/lib/onion-fec.jar"/>
		<copy todir="${build}"><fileset dir="${pkg.base}/jcpuid/lib" includes="freenet/**" /></copy>
		<copy todir="${build}"><fileset dir="${pkg.base}/NativeBigInteger/lib" includes="net/i2p/**" /></copy>
		<copy todir="${build}"><fileset dir="${pkg.base}/NativeThread/lib" includes="freenet/**" /></copy>
	</target>

	<target name="package-local" description="build locally maintained packages">
		<ant inheritAll="false" antfile="${pkg.base}/onion-common/build.xml"/>
		<ant inheritAll="false" antfile="${pkg.base}/onion-fec/build.xml"/>
		<!-- TODO build native binaries for the other libs -->
	</target>

	<target name="clean-local">
		<ant inheritAll="false" antfile="${pkg.base}/onion-common/build.xml" target="clean" />
		<ant inheritAll="false" antfile="${pkg.base}/onion-fec/build.xml" target="clean" />
		<!-- TODO clean native binaries for the other libs -->
	</target>

	<!-- =================================================================== -->
	<!-- Build remote packages                                               -->
	<!-- =================================================================== -->

	<target name="package-lib" depends="prepare-libsrc" description="build external packages">
		<!-- TODO build wrapper native libs -->
		<ant inheritAll="false" antfile="${pkg.base}/wrapper/build.xml" target="jar">
			<property name="bits" value="${sun.arch.data.model}"/>
			<property name="javac.target.version" value="${javac.target.version}"/>
		</ant>
		<ant inheritAll="false" antfile="${pkg.base}/bdb-je/build.xml" target="jar"/>
		<ant inheritAll="false" antfile="${pkg.base}/db4o/build.xml" target="jar">
			<property name="javac.target.version" value="${javac.target.version}"/>
		</ant>
		<maven basedir="${pkg.base}/commons-compress" goal="package"/>

		<ant inheritAll="false" antfile="${pkg.base}/lzmajio/build.xml" target="jar"/>
		<!-- TODO run tests -->
		<ant inheritAll="false" antfile="${pkg.base}/mantissa/build.xml" target="jar"/>
	</target>

	<target name="clean-lib">
		<!--WORKAROUND bug in wrapper's build.xml-->
		<mkdir dir="${pkg.base}/wrapper/bin"/>
		<mkdir dir="${pkg.base}/wrapper/lib"/>
		<mkdir dir="${pkg.base}/wrapper/test"/>
		<ant inheritAll="false" antfile="${pkg.base}/wrapper/build.xml">
			<property name="bits" value="${sun.arch.data.model}"/>
			<target name="clean"/>
			<target name="total-clean"/>
		</ant>
		<ant inheritAll="false" antfile="${pkg.base}/bdb-je/build.xml">
			<target name="clean"/>
			<target name="clean-javadoc"/>
			<target name="clean-jca"/>
		</ant>
		<ant inheritAll="false" antfile="${pkg.base}/db4o/build.xml" target="clean"/>
		<maven basedir="${pkg.base}/commons-compress" goal="clean"/>

		<!-- TODO lzmajio doesn't have a "clean" target :/ -->
		<!--<ant inheritAll="false" antfile="${pkg.base}/lzmajio/build.xml" target="clean"/>-->
		<ant inheritAll="false" antfile="${pkg.base}/mantissa/build.xml" target="clean"/>
	</target>

	<!-- =================================================================== -->
	<!-- Get remote packages                                                 -->
	<!-- =================================================================== -->

	<target name="get-libsrc">
		<getlibsrc name="wrapper"/>
		<getlibsrc name="bdb-je"/>
		<getlibsrc name="db4o"/>
		<getlibsrc name="commons-compress"/>
		<getlibsrc name="lzma"/>
		<getlibsrc name="lzmajio"/>
		<getlibsrc name="mantissa"/>
	</target>

	<target name="prepare-libsrc" depends="get-libsrc" description="ensure that all remote source code is available">
		<unpacklibsrc name="wrapper"/>
		<unpacklibsrc name="bdb-je"/>
		<unpacklibsrc name="db4o" dest="db4o.orig"/>
		<unpacklibsrc name="commons-compress"/>
		<unpacklibsrc name="lzma"/>
		<unpacklibsrc name="lzmajio"/>
		<unpacklibsrc name="mantissa"/>

		<!-- extra massaging -->
		<copy todir="${pkg.base}/db4o">
			<fileset dir="${pkg.base}/db4o.orig"><include name="src/db4oj*/**"/></fileset>
		</copy>
		<copy todir="${pkg.base}/lzmajio">
			<fileset dir="${pkg.base}/lzma/Java"><include name="SevenZip/**"/></fileset>
		</copy>
	</target>

	<target name="clean-libsrc" description="clean source code of remote packages">
		<delete dir="${pkg.base}/wrapper"/>
		<delete dir="${pkg.base}/bdb-je"/>
		<delete dir="${pkg.base}/db4o.orig"/>
		<delete dir="${pkg.base}/commons-compress"/>
		<delete dir="${pkg.base}/lzma"/>
		<delete dir="${pkg.base}/lzmajio"/>
		<delete dir="${pkg.base}/mantissa"/>

		<!-- undo source code massaging -->
		<delete dir="${pkg.base}/db4o/src"/>
	</target>

	<!-- =================================================================== -->
	<!-- ANT dependencies                                                    -->
	<!-- =================================================================== -->

	<!-- required to work with commons-compress -->
	<include file="ant-task-maven.xml"/>

	<macrodef name="copylib">
		<attribute name="name" />
		<sequential>
			<copy tofile="${dist}/@{name}.jar" file="${pkg.base}/@{name}/${extlib.@{name}.jar-dst}"/>
		</sequential>
	</macrodef>

	<macrodef name="unpacklibsrc">
		<attribute name="name" />
		<attribute name="dest" default="@{name}"/>
		<sequential>
			<if>
				<available file="${pkg.base}/@{dest}" type="dir"/>
				<else>
					<delete dir="${tmp}"/>
					<mkdir dir="${tmp}"/>
					<basename property="extlib.@{name}.filename" file="${extlib.@{name}.location}"/>
					<untar dest="${tmp}" compression="gzip">
						<fileset dir="${lib}" includes="${extlib.@{name}.filename}"><filename name="*.tar.gz"/></fileset>
					</untar>
					<untar dest="${tmp}" compression="bzip2">
						<fileset dir="${lib}" includes="${extlib.@{name}.filename}"><filename name="*.tar.bz2"/></fileset>
					</untar>
					<untar dest="${tmp}">
						<fileset dir="${lib}" includes="${extlib.@{name}.filename}"><filename name="*.tar"/></fileset>
					</untar>
					<unzip dest="${tmp}">
						<fileset dir="${lib}" includes="${extlib.@{name}.filename}"><filename name="*.zip"/></fileset>
					</unzip>
					<move file="${tmp}/${extlib.@{name}.top-dir}" tofile="${pkg.base}/@{dest}"/>
					<delete dir="${tmp}"/>
				</else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="getlibsrc">
		<attribute name="name" />
		<sequential>
			<basename property="extlib.@{name}.filename" file="${extlib.@{name}.location}"/>
			<condition property="extlib.@{name}.available" else="false">
				<and>
					<available file="${lib}/${extlib.@{name}.filename}"/>
					<checksum file="${lib}/${extlib.@{name}.filename}" algorithm="SHA-256"
					  property="${extlib.@{name}.sum-sha256}" />
				</and>
			</condition>
			<if>
				<equals arg1="${extlib.@{name}.available}" arg2="true"/>
				<else>
					<delete dir="${tmp}"/>
					<mkdir dir="${tmp}"/>
					<get src="${extlib.@{name}.location}" dest="${tmp}/${extlib.@{name}.filename}"
					  verbose="true" usetimestamp="true"/>
					<checksum file="${tmp}/${extlib.@{name}.filename}" algorithm="SHA-256"
					  property="${extlib.@{name}.sum-sha256}" verifyProperty="extlib.@{name}.sum-sha256.remote" />
					<fail unless="${extlib.@{name}.sum-sha256.remote}"
					  message="getlibsrc: ${extlib.@{name}.filename} checksum mismatch"/>
					<move file="${tmp}/${extlib.@{name}.filename}" todir="${lib}"/>
					<delete dir="${tmp}"/>
				</else>
			</if>
		</sequential>
	</macrodef>

	<!-- required for "getlibsrc" macro -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath><pathelement location="${java.class.dirs}/ant-contrib.jar"/></classpath>
	</taskdef>

</project>
